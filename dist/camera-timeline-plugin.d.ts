import * as THREE from 'three';
import { WglUtil } from './wgl-util';
import { ITimelinePlugin } from './i-timeline-plugin';
import { SimpleDictionary } from './models/simple-dictionary';
import { Timeline } from './models/timeline';
import { ErrorService } from './services/error-service';
import { DataModel } from './models/data-model';
export declare class CameraTimelinePlugin implements ITimelinePlugin {
    private _timeline;
    private _errorSvc;
    config: SimpleDictionary<string>;
    timeline: Timeline;
    data: DataModel;
    w: WglUtil;
    mainGroup: THREE.Group;
    constructor(_timeline: Timeline, _errorSvc: ErrorService);
    init(): void;
    load(): void;
    update(time?: number): void;
    private oParser;
    private vMeshCameraVerticesIndex;
    private vMeshCameraVerticesNextIndex;
    private resetMeshCameraVerticesFlag;
    private meshCameraVertices;
    private meshCameraVerticesSet;
    private evaluateTimelineExpressions(timeline);
    private evaluateDisplacementExpression(displacement, p);
    private moveTimelineCamera(timeline);
    private moveTimelineCameraByExpression(timeline, time);
    private moveTimelineCameraDisplacementByExpression(displacement, p, fn, time);
    private animateTimeline(timeline, time?);
    private moveTimelineMeshCameraVertices(timeline);
    private resetMeshCameraVertices(v, vNext);
    private moveMeshCameraVertices(v, vNext, p, displacement);
    private moveMeshCameraVerticesNext(vNext, p);
    private animateTimelineMeshes(timeline, time?);
    private moveMesh(mesh, tmesh);
    private moveMeshByExpression(mesh, tmesh, time);
    private moveMeshDisplacementByExpression(mesh, displacement, p, fn, time);
    private rotateMesh(mesh, tmesh);
    private rotateMeshByExpression(mesh, tmesh, time);
    private rotateMeshDisplacementByExpression(mesh, displacement, p, fn, time);
    private scaleMesh(mesh, tmesh);
    private scaleMeshByExpression(mesh, tmesh, time);
    private scaleMeshDisplacementByExpression(mesh, displacement, p, fn, time);
}
