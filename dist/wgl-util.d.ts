import * as THREE from 'three';
import * as dat from 'dat-gui';
import { Stats } from './stats';
import * as cfg from './wgl-util-cfgs';
import OrbitControls = require('three-orbitcontrols');
import TrackballControls = require('three-trackballcontrols');
import * as leapControls from 'threeleapcontrols';
import StereoEffect = require('three-stereoeffect');
import * as css3d from 'three-css3drenderer';
import { ContentChangedType } from './wgl-util-content-changed-args';
export declare class WglUtil {
    cfg: cfg.WglUtilCfg;
    glScene: THREE.Scene;
    camera: THREE.Camera;
    cameraHelper: THREE.CameraHelper;
    glRenderer: THREE.WebGlRenderer;
    raycaster: THREE.Raycaster;
    orbitControls: OrbitControls;
    trackballControls: TrackballControls;
    leapCameraControls: leapControls.LeapCameraControls;
    leapObjectsControls: leapControls.LeapObjectControls[];
    axis: THREE.AxisHelper;
    axisArrowX: THREE.ArrowHelper;
    axisArrowY: THREE.ArrowHelper;
    axisArrowZ: THREE.ArrowHelper;
    stats: Stats;
    dndSelectedObject: THREE.Object3D;
    dndIntersectedObject: THREE.Object3D;
    dndSelectedObjectBoxHelper: THREE.BoxHelper;
    datGui: dat.GUI;
    guiControls: any;
    objects: any[];
    parent: any;
    grid: THREE.GridHelper;
    stereoEffect: StereoEffect;
    mirrorCubeCamera: THREE.CubeCamera;
    mirrorCube: any;
    cssScene: THREE.Scene;
    cssRenderer: css3d.CSS3DRenderer;
    private contentChanged;
    constructor();
    private asciiEffect;
    private anaglyphEffect;
    cameraCfg: cfg.CameraCfg;
    rendererCfg: cfg.RendererCfg;
    sceneCfg: cfg.SceneCfg;
    orbitCfg: cfg.OrbitCfg;
    trackballCfg: cfg.TrackballCfg;
    lightCfg: cfg.LightCfg;
    dirLightCfg: cfg.DirLightCfg;
    pointLightCfg: cfg.PointLightCfg;
    hemisphereLightCfg: cfg.HempisphereLightCfg;
    spotLightCfg: cfg.SpotLightCfg;
    lineCfg: cfg.LineCfg;
    planeCfg: cfg.PlaneCfg;
    circleCfg: cfg.CircleCfg;
    cubeCfg: cfg.CubeCfg;
    sphereCfg: cfg.SphereCfg;
    cylinderCfg: cfg.CylinderCfg;
    torusCfg: cfg.TorusCfg;
    torusKnotCfg: cfg.TorusKnotCfg;
    pointsCfg: cfg.PointsCfg;
    pointsFromGeomCfg: cfg.PointsFromGeomCfg;
    particleCfg: cfg.ParticleCfg;
    textureCfg: cfg.TextureCfg;
    shadersCfg: cfg.ShadersCfg;
    skyBoxCfg: cfg.SkyBoxCfg;
    objModelCfg: cfg.ObjModelCfg;
    textCfg: cfg.TextCfg;
    birdsCfg: cfg.BirdsCfg;
    matCfg: {
        color: number;
        wireframe: boolean;
    };
    spriteCfg: cfg.SpriteCfg;
    mirrorCubeCfg: cfg.MirrorCubeCfg;
    private birds;
    private boids;
    private mousePosition;
    private dndPlane;
    private dndOffset;
    private dndIntersection;
    copyCfg(srcCfg: any, destCfg: any): void;
    Android: () => any;
    BlackBerry: () => any;
    iOS: () => any;
    Opera: () => any;
    Windows: () => any;
    isMobile(): any;
    static detectWebGL(): boolean;
    setOptions(cfg: any): void;
    setOption(name: string, value: any): void;
    getUrl(url: any, onSuccess?: any, onError?: any): void;
    init(sceneConfig?: cfg.SceneCfg, cameraConfig?: cfg.CameraCfg, rendererConfig?: cfg.RendererCfg, orbitCfg?: cfg.OrbitCfg, trackballCfg?: cfg.TrackballCfg): void;
    render(): void;
    setCamera(cameraCfg?: cfg.CameraCfg, orbitCfg?: cfg.OrbitCfg, trackballCfg?: cfg.TrackballCfg): void;
    setScene(sceneCfg?: cfg.SceneCfg): void;
    convertHex(hex: any, opacity: any): string;
    initStats(): Stats;
    initOrbit(cfg: any): void;
    initTrackball(cfg: any): void;
    initLeapCamera(cfg: any): void;
    initDatGui(): any;
    addGuiFolder(name: any): any;
    addGuiProp(folder: any, propName: any, value: any, min?: any, max?: any, values?: any): any;
    addGuiColorProp(folder: any, propName: any, value: any): any;
    addGuiMethod(folder: any, methodName: any): any;
    addGuiButton(folder: any, name: any, handler: any): any;
    addGuiPropValues(folder: any, propName: any, value: any, values: any): any;
    refreshGui(): void;
    static refreshDatGui(datGui: dat.GUI): void;
    getGuiFolder(folderName: string): any;
    getGuiController(folderName: string, propName: string): any;
    removeDatGuiFolder(name: string): void;
    static removeDatGuiFolder(datGui: dat.GUI, name: string): void;
    addAxisHelper(sceneCfg?: cfg.SceneCfg): void;
    addAxisArrow(axis: cfg.XYZ): any;
    removeAxisHelper(): void;
    addDirLight(cfg: any, group?: any): any;
    addPointLight(cfg?: any, group?: any): any;
    addHemisphereLight(cfg: any, group?: any): any;
    addSpotLight(cfg?: any, group?: any): any;
    getJson(group: any): any;
    onContentChanged(object: any, group: any, type: ContentChangedType): void;
    add(obj: any, group?: any, raiseContentChanged?: boolean, isSelectable?: boolean): void;
    addLight(lightHelper: any, group?: any, raiseContentChanged?: boolean, isSelectable?: boolean): void;
    remove(obj: any, group?: any, raiseContentChanged?: boolean): void;
    removeLight(lightHelper: any, group?: any, raiseContentChanged?: boolean): void;
    clear(group?: any): void;
    genPlaneGeom(cfg?: any): any;
    genCircleGeom(cfg?: any): any;
    genCubeGeom(cfg?: any): any;
    genSphereGeom(cfg?: any): any;
    genCylinderGeom(cfg?: any): any;
    genTorusGeom(cfg?: any): any;
    genTorusKnotGeom(cfg?: any): any;
    genLineGeom(cfg?: any): any;
    genTextGeom(cfg?: any): any;
    genParticleGeom(cfg?: any): any;
    genMeshBasicMat(cfg?: any): any;
    genMeshLambertMat(cfg?: any): any;
    genMeshPhongMat(cfg?: any): any;
    genLineBasicMat(cfg?: any): any;
    genLineDashedMat(cfg?: any): any;
    genTextMat(cfg?: any): any;
    genParticleMat(cfg?: any): any;
    genSpriteMat(cfg: any): any;
    genPointLight(cfg?: any): any;
    genDirLight(cfg?: any): any;
    genHemisphereLight(cfg?: any): any;
    genSpotLight(cfg?: any): any;
    addLine(cfg: any, group?: any): any;
    addPlane(cfg: any, group?: any): any;
    addCircle(cfg: any, group?: any): any;
    addCube(cfg: any, group?: any): any;
    addSphere(cfg: any, group?: any): any;
    addCylinder(cfg: any, group?: any): any;
    addTorus(cfg: any, group?: any): any;
    addTorusKnot(cfg: any, group?: any): any;
    addParticles(cfg: any, group?: any): any;
    addSprite(cfg: any, group?: any): any;
    addTextSprite(spriteCfg: cfg.SpriteCfg, textureCfg: cfg.TextureCfg, group?: any): any;
    addMesh(geom: any, mat: any, group?: any): any;
    addParticleMesh(geom: any, mat: any, group?: any): any;
    setAsciiEffect(): void;
    setAnaglyphEffect(): void;
    setStereoEffect(): void;
    unsetEffects(): void;
    setFog(sceneConfig: any): void;
    genPoints(numPoints: any, cfg: any, group?: any): any;
    rotate(obj: any, rotationSpeed: any): void;
    createTextureMaterial(imageFile: any, cfg: any): any;
    createTextureMaterials(imageFiles: any, cfg: any): any;
    createVideoTextureMaterial(imageFile: any, cfg: any): any;
    createCanvasTexture(imageFile: string, cfg: cfg.TextureCfg): any;
    createCanvasTextureMaterial(imageFile: string, cfg: cfg.TextureCfg): any;
    createMesh(geom: any, mat: any, imageFile: any, cfg: any): any;
    createParticleMesh(geom: any, mat: any): any;
    genShaderMaterial(cfg: any): any;
    loadShaderFile(shaderFile: any, loadHandler: any): void;
    addSkyBoxFromFile(cfg: any, group?: any): any;
    addSkyBoxFromFiles(cfg: any, group?: any): any;
    loadObjModel(cfg: any, objModelFile: any, textureFile: any, onLoad: any, onProgress: any, onError: any): void;
    loadObjMtlModel(cfg: any, objModelFile: any, mtlFile: any, onLoad: any, onProgress: any, onError: any): void;
    createText(cfg: any): any;
    createTextMaterial(color1: any, color2: any): any;
    centerMeshX(mesh: any, offsetX: any): void;
    centerMeshY(mesh: any, offsetY: any): void;
    centerMeshZ(mesh: any, offsetZ: any): void;
    animateBirds(): void;
    initBirds(cfg: any, group?: any): void;
    repulseBoids(vector: any): void;
    windowResize(): void;
    addSelectedObjectBoxHelper(group?: any): void;
    removeSelectedObjectBoxHelper(group?: any): void;
    updateSelectedObjectBoxHelper(): void;
    addBoxHelper(obj: any, group?: any): any;
    removeBoxHelper(objBoxHelper: any, group?: any): void;
    updateBoxHelper(obj: any, objBoxHelper: any): void;
    getMouseUpIntersects(event: any): any;
    dndMouseMove(event: any, moveObject?: boolean, changePointer?: boolean): void;
    private setIntersectedObjectColor();
    dndMouseDown(event: any): void;
    dndMouseUp(event: any): void;
    static rgbToHex(R: any, G: any, B: any): string;
    static hexToRgb(h: any): {
        r: number;
        g: number;
        b: number;
    };
    static hexToR(h: any): number;
    static hexToG(h: any): number;
    static hexToB(h: any): number;
    static cutHex(h: any): any;
    static toHex(n: any): string;
    static getColorFromRgb(value: {
        r: any;
        g: any;
        b: any;
    }): any;
    static getColorFromHex(value: string): any;
    static isRGB(value: any): boolean;
    static getColor(value: any): THREE.Color;
    static getThreeColor(value: any): number;
    genPointsMeshFromGeometry(geometry: any, cfg: any): any;
    genPointsMeshFromMesh(mesh: any, cfg: any): any;
    toggleMeshMaterials(mesh: any, visible: any): void;
    addGridHelper(cfg?: cfg.SceneCfg): any;
    removeGridHelper(): void;
    addGroup(group?: any): any;
    getObjectFromJson(objJson: any, geometries: any, materials: any): void;
    transform(tipPosition: any, w: any, h: any): any[];
    leapFocusObject(frame: any): number;
    initLeapObjectControls(threeObj: any): void;
    leapSelectObject(frame: any): void;
    objectsOverlap(obj1: THREE.Object3D, obj2: THREE.Object3D): boolean;
    checkObjectOverlap(threeObj: THREE.Object3D, otherObjs: THREE.Object3D[]): boolean;
    setMirrorCubeCamera(cfg: any): any;
    genMirrorCubeMat(cfg: any): any;
    addMirrorCube(cfg: any): any;
    updateMirrorCube(): void;
    createCssObject(w: number, h: number, position: THREE.Vector3, rotation: THREE.Vector3, url: string): any;
    createCss3DPagePlane(w: any, h: any, position: any, rotation: any): any;
    create3dPage(w: any, h: any, position: any, rotation: any, url: any, group?: any): void;
    setCssRenderer(): void;
}
