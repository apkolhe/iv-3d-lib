import * as THREE from 'three';
import { Iv3dObjectProperty } from './models/iv-3d-object-property';
import { Iv3dObject, Iv3dGeometryType, Iv3dMaterialType, Iv3dObjectType } from './models/iv-3d-object';
import { DataModel } from './models/data-model';
import * as cfg from './wgl-util-cfgs';
import { WglUtil } from './wgl-util';
import { Iv3dLight, Iv3dLightType } from './models/iv-3d-light';
import { UserService } from './services/user-service';
import { TimelineMesh } from './models/timeline';
import { ErrorService } from './services/error-service';
import { Iv3dEnvironment } from './models/iv-3d-environment';
export declare class Iv3dObjectHandler {
    private userSvc;
    private errorSvc;
    private environment;
    private offset;
    private radius;
    private cssBackgroundColor;
    private oParser;
    fonts: string[];
    fontWeights: string[];
    materials: string[];
    objectTypes: string[];
    valueFormats: string[];
    lineCfg: cfg.LineCfg;
    lineGeomProps: Iv3dObjectProperty[];
    cubeCfg: cfg.CubeCfg;
    cubeGeomProps: Iv3dObjectProperty[];
    circleCfg: cfg.CircleCfg;
    circleGeomProps: Iv3dObjectProperty[];
    planeCfg: cfg.PlaneCfg;
    planeGeomProps: Iv3dObjectProperty[];
    sphereCfg: cfg.SphereCfg;
    sphereGeomProps: Iv3dObjectProperty[];
    cylinderCfg: cfg.CylinderCfg;
    cylinderGeomProps: Iv3dObjectProperty[];
    torusCfg: cfg.TorusCfg;
    torusGeomProps: Iv3dObjectProperty[];
    torusKnotCfg: cfg.TorusKnotCfg;
    torusKnotGeomProps: Iv3dObjectProperty[];
    textCfg: cfg.TextCfg;
    textGeomProps: Iv3dObjectProperty[];
    particleCfg: cfg.ParticleCfg;
    particleGeomProps: Iv3dObjectProperty[];
    objectProps: Iv3dObjectProperty[];
    objectPropsDirectNames: string[];
    materialProps: Iv3dObjectProperty[];
    pointLightCfg: cfg.PointLightCfg;
    pointLightProps: Iv3dObjectProperty[];
    dirLightCfg: cfg.DirLightCfg;
    dirLightProps: Iv3dObjectProperty[];
    hemisphereLightCfg: cfg.HempisphereLightCfg;
    hemisphereLightProps: Iv3dObjectProperty[];
    spotLightCfg: cfg.SpotLightCfg;
    spotLightProps: Iv3dObjectProperty[];
    cameraCfg: cfg.CameraCfg;
    cameraProps: Iv3dObjectProperty[];
    cssCfg: cfg.CssCfg;
    dataSourceProps: Iv3dObjectProperty[];
    sceneCfg: cfg.SceneRuntimeCfg;
    sceneProps: Iv3dObjectProperty[];
    audioCfg: cfg.AudioCfg;
    audioProps: Iv3dObjectProperty[];
    cssProps: Iv3dObjectProperty[];
    static TweenEasings: {
        'Linear.None': any;
        'Quadratic.In': any;
        'Quadratic.Out': any;
        'Quadratic.InOut': any;
        'Cubic.In': any;
        'Cubic.Out': any;
        'Cubic.InOut': any;
        'Quartic.In': any;
        'Quartic.Out': any;
        'Quartic.InOut': any;
        'Quintic.In': any;
        'Quintic.Out': any;
        'Quintic.InOut': any;
        'Sinusoidal.In': any;
        'Sinusoidal.Out': any;
        'Sinusoidal.InOut': any;
        'Exponential.In': any;
        'Exponential.Out': any;
        'Exponential.InOut': any;
        'Circular.In': any;
        'Circular.Out': any;
        'Circular.InOut': any;
        'Elastic.In': any;
        'Elastic.Out': any;
        'Elastic.InOut': any;
        'Back.In': any;
        'Back.Out': any;
        'Back.InOut': any;
        'Bounce.In': any;
        'Bounce.Out': any;
        'Bounce.InOut': any;
    };
    constructor(userSvc: UserService, errorSvc: ErrorService, environment: Iv3dEnvironment);
    getProp(propName: string, props: Iv3dObjectProperty[]): Iv3dObjectProperty;
    getChild(uuid: string, container: Iv3dObject): any;
    getCfg(props: Iv3dObjectProperty[]): any;
    getGenCfg<T extends Object>(config: T, props: Iv3dObjectProperty[]): T;
    getLineCfg(props: Iv3dObjectProperty[]): cfg.LineCfg;
    getPlaneCfg(props: Iv3dObjectProperty[]): cfg.PlaneCfg;
    getCircleCfg(props: Iv3dObjectProperty[]): cfg.CircleCfg;
    getCubeCfg(props: Iv3dObjectProperty[]): cfg.CubeCfg;
    getSphereCfg(props: Iv3dObjectProperty[]): cfg.SphereCfg;
    getCylinderCfg(props: Iv3dObjectProperty[]): cfg.CylinderCfg;
    getTorusCfg(props: Iv3dObjectProperty[]): cfg.TorusCfg;
    getTorusKnotCfg(props: Iv3dObjectProperty[]): cfg.TorusKnotCfg;
    getTextCfg(props: Iv3dObjectProperty[]): cfg.TextCfg;
    getParticleCfg(props: Iv3dObjectProperty[]): cfg.ParticleCfg;
    getPointLightCfg(props: Iv3dObjectProperty[]): cfg.PointLightCfg;
    getDirLightCfg(props: Iv3dObjectProperty[]): cfg.DirLightCfg;
    getHemishphereLightCfg(props: Iv3dObjectProperty[]): cfg.HempisphereLightCfg;
    getSpotLightCfg(props: Iv3dObjectProperty[]): cfg.SpotLightCfg;
    getCameraCfg(props: Iv3dObjectProperty[]): cfg.CameraCfg;
    getSceneCfg(props: Iv3dObjectProperty[]): cfg.SceneRuntimeCfg;
    getAudioCfg(props: Iv3dObjectProperty[]): cfg.AudioCfg;
    getCssCfg(props: Iv3dObjectProperty[]): cfg.CssCfg;
    getTextureCfg(props: Iv3dObjectProperty[]): cfg.TextureCfg;
    setCfgProps<T extends Object>(config: T, props: Iv3dObjectProperty[], excludeProps?: string[]): void;
    setLineCfgProps(config: cfg.LineCfg, props: Iv3dObjectProperty[]): void;
    setPlaneCfgProps(config: cfg.PlaneCfg, props: Iv3dObjectProperty[]): void;
    setCircleCfgProps(config: cfg.CircleCfg, props: Iv3dObjectProperty[]): void;
    setCubeCfgProps(config: cfg.CubeCfg, props: Iv3dObjectProperty[]): void;
    setSphereCfgProps(config: cfg.SphereCfg, props: Iv3dObjectProperty[]): void;
    setCylinderCfgProps(config: cfg.CylinderCfg, props: Iv3dObjectProperty[]): void;
    setTorusCfgProps(config: cfg.TorusCfg, props: Iv3dObjectProperty[]): void;
    setTorusKnotCfgProps(config: cfg.TorusKnotCfg, props: Iv3dObjectProperty[]): void;
    setTextCfgProps(config: cfg.TextCfg, props: Iv3dObjectProperty[]): void;
    setParticleCfgProps(config: cfg.ParticleCfg, props: Iv3dObjectProperty[]): void;
    setPointLightCfgProps(config: cfg.PointLightCfg, props: Iv3dObjectProperty[]): void;
    setDirLightCfgProps(config: cfg.DirLightCfg, props: Iv3dObjectProperty[]): void;
    setHempisphereLightCfgProps(config: cfg.HempisphereLightCfg, props: Iv3dObjectProperty[]): void;
    setSpotLightCfgProps(config: cfg.SpotLightCfg, props: Iv3dObjectProperty[]): void;
    setCameraCfgProps(config: cfg.CameraCfg, props: Iv3dObjectProperty[]): void;
    setSceneCfgProps(config: cfg.SceneRuntimeCfg, props: Iv3dObjectProperty[]): void;
    setAudioCfgProps(config: cfg.AudioCfg, props: Iv3dObjectProperty[]): void;
    setTextureCfgProps(config: cfg.TextureCfg, props: Iv3dObjectProperty[]): void;
    setCssCfgProps(config: cfg.CssCfg, props: Iv3dObjectProperty[]): void;
    loadObject(obj: Iv3dObject, w: WglUtil, mainGroup: THREE.Group, demo: boolean, isPublic: boolean, key: string, threeObjCallback: Function): void;
    private createShaderMaterial(shader, w, demo, isPublic, key);
    private attachShader(shader, obj, mesh, w, demo, isPublic, key);
    loadLight(light: Iv3dLight, w: WglUtil): void;
    genGeom(type: Iv3dGeometryType, props: Iv3dObjectProperty[], w: WglUtil): any;
    genMat(props: Iv3dObjectProperty[], w: WglUtil, texture?: any): any;
    genLight(type: Iv3dLightType, props: Iv3dObjectProperty[], w: WglUtil): any;
    genGeomProps(geomType: Iv3dGeometryType, cfg: any): Iv3dObjectProperty[];
    genMatProps(matType: Iv3dMaterialType, mat: THREE.Material, w: WglUtil): Iv3dObjectProperty[];
    genObjProps(threeObj: THREE.Object3D): Iv3dObjectProperty[];
    genLightProps(lightType: Iv3dLightType, cfg: any): Iv3dObjectProperty[];
    setIv3dObjectProps(obj: Iv3dObject, threeObj: THREE.Object3D): void;
    setThreeObjProps(obj: Iv3dObject, threeObj: THREE.Object3D): void;
    setIv3dLightProps(obj: Iv3dLight, threeLightHelper: THREE.Object3D): void;
    setThreeLightProps(light: Iv3dLight, threeObj: THREE.LightHelper): void;
    loadObjectLoaderData(data: DataModel, w: WglUtil, mainGroup: THREE.Group): void;
    loadData(data: DataModel, w: WglUtil, mainGroup: THREE.Group, demo: boolean, isPublic: boolean, key: string): void;
    loadNewData(data: DataModel, w: WglUtil): void;
    createContainer(data: DataModel): Iv3dObject;
    createMainGroup(data: DataModel, w: WglUtil): any;
    getFullFileName(fileName: string, demo: boolean, isPublic: boolean, key: string): string;
    loadTextureMat(imgFile: string, obj: Iv3dObject, w: WglUtil, demo: boolean, isPublic: boolean, key: string, handler?: any): void;
    loadTexture(imgFile: string, w: WglUtil, demo: boolean, isPublic: boolean, key: string, handler?: any): any;
    createCanvasTexture(obj: Iv3dObject, geom: THREE.Geometry, w: WglUtil, imgFile: string, demo: boolean, isPublic: boolean, key: string): any;
    genObjectWithMat(obj: Iv3dObject, geom: THREE.Geometry, mainGroup: any, w: WglUtil, demo: boolean, isPublic: boolean, key: string, threeObjCallback: Function): void;
    genParticlesWithMat(obj: Iv3dObject, geom: THREE.Geometry, mainGroup: any, w: WglUtil, demo: boolean, isPublic: boolean, key: string, threeObjCallback: Function): void;
    fixData(data: DataModel): void;
    getAudio(data: DataModel, demo: boolean, isPublic: boolean, key: string): cfg.AudioCfg;
    getDataCss(data: DataModel): cfg.CssCfg;
    getCss(backgroundColor?: any): cfg.CssCfg;
    fixObjMissingProperty(o: Iv3dObject, propName: string, setObjectProp?: boolean): void;
    fixMissingProps(props: Iv3dObjectProperty[], standardProps: Iv3dObjectProperty[]): Iv3dObjectProperty[];
    fixTimelineMeshProperty(tmesh: TimelineMesh, propName: string, defaultValue?: any): void;
    createDefaultObject(meshType: Iv3dObjectType, geomType: Iv3dGeometryType): Iv3dObject;
}
